@using ExpenditureManagement.Models
@using ExpenditureManagement.Logic
@model ExpensesModels

@{
    ViewBag.Title = "Graph";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Head{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
}
<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="col-6">
                    <select required class="form-control" name="Month" onchange="SearchData();">
                        @for (int i = 1; i < 13; i++)
                        {
                            DateTime dt = new DateTime(2023, i, 1);
                            <option value="@i"
                                    @if (i == GenericLogic.IstNow.Month) { <text> selected </text> }>
                                @dt.ToString("MMMM")
                            </option>
                        }
                    </select>
                </div>
                <div class="col-6">
                    <select required class="form-control" name="Year" onchange="SearchData();">
                        @foreach (var year in Model.Years)
                        {
                            <option value="@year"
                                    @if (year == GenericLogic.IstNow.Year) { <text> selected</text>}>
                                @year
                            </option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-md-6 mt-4" data-graph="pie">

        </div>
        <div class="col-md-6 mt-4" data-graph="bar">

        </div>
    </div>
</div>

@section Script{
    <script type="text/javascript">
        $(document).ready(function () {
            var data = {
                Month: $('[name="Month"]').val(),
                Year: $('[name="Year"]').val(),
            };
            $('[data-graph]').html('<div class="overlay text-center m-4"><i class="fas fa-sync-alt fa-spin fa-2x"></i></div>');
            $.ajax({
                type: "POST",
                url: "@Url.Action("GraphBind", "Home")",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "JSON",
                success: function (data) {
                    $('[data-graph="pie"]').html('<canvas id="pie"></canvas>');
                    $('[data-graph="bar"]').html('<canvas id="bar"></canvas>');
                    GraphBind(data);
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });
        });

        function SearchData() {
            var data = {
                Month: $('[name="Month"]').val(),
                Year: $('[name="Year"]').val(),
            };
            $('[data-graph]').html('<div class="overlay text-center m-4"><i class="fas fa-sync-alt fa-spin fa-2x"></i></div>');
            $.ajax({
                type: "POST",
                url: "@Url.Action("GraphBind", "Home")",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "JSON",
                success: function (data) {
                    $('[data-graph="pie"]').html('<canvas id="pie"></canvas>');
                    $('[data-graph="bar"]').html('<canvas id="bar"></canvas>');
                    GraphBind(data);
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });
        }

        function GraphBind(data) {
            const ctx = document.getElementById('pie');

            new Chart(ctx, {
                type: 'pie',
                data: data,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            const ctx2 = document.getElementById('bar');
            new Chart(ctx2, {
                type: 'bar',
                data: data,
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

    </script>
}