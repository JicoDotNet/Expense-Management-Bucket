@model ExpenditureManagement.Models.ExpensesModels
@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Head{
    <style type="text/css">
        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 100%;
            left: 0;
            right: 0;
        }

            .autocomplete-items div {
                padding: 10px;
                cursor: pointer;
                background-color: #fff;
                border-bottom: 1px solid #d4d4d4;
            }

                /*when hovering an item:*/
                .autocomplete-items div:hover {
                    background-color: #e9e9e9;
                }

        /*when navigating through the items using the arrow keys:*/
        .autocomplete-active {
            background-color: DodgerBlue !important;
            color: #ffffff;
        }
    </style>
}


<div class="container">
    @if (TempData.ContainsKey("success"))
    {
        <div class="row justify-content-center" data-alert>
            <div class="col-12">
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @Html.Raw(TempData["success"])
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
        </div>
    }
    @using (Html.BeginForm("Add", "Home", FormMethod.Post))
    {
        <div class="row justify-content-center">
            <div class="col-12">
                @if (Model.Expenses == null || string.IsNullOrEmpty(Model.Expenses.RowKey))
                {
                    <div class="p-1 mb-2 alert alert-success alert-dismissible fade show" role="alert">
                        Add New Record
                    </div>
                    <input type="hidden" value="" name="RowKey" />
                }
                else
                {
                    <div class="p-1 mb-2 alert alert-danger alert-dismissible fade show" role="alert">
                        Edit Record For: <b>@Model.Expenses.TransactionDate.ToString("dd-MMM-yyyy")</b>
                    </div>
                    <input type="hidden" value="@Model.Expenses.RowKey" name="RowKey" />
                }
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-12">
                <div class="row">
                    <div class="col-5">
                        <label>Month <span class="text-danger">*</span></label>
                        <select required class="form-control" name="Month" onchange="MonthChange(this);">
                            @for (int i = 1; i < 13; i++)
                            {
                                <option value="@i">
                                    @(new DateTime(2021, i, 1).ToString("MMMM"))
                                </option>
                            }
                        </select>
                    </div>
                    <div class="col-3">
                        <label>Day <span class="text-danger">*</span></label>
                        <select required class="form-control" name="Day">
                        </select>
                    </div>
                    <div class="col-4">
                        <label>Year <span class="text-danger">*</span></label>
                        <select required class="form-control" name="Year">
                            @foreach (var year in Model.Years)
                            {
                                <option value="@year"
                                        @if (year == GenericLogic.IstNow.Year) { <text> selected</text>}>
                                    @year
                                </option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <label>Expenses Type <span class="text-danger">*</span></label>
                        <select required class="form-control select2" name="ExpensesType">
                            <option value="">-Select-</option>
                            @foreach (var ExT in Model.ExpensesTypes)
                            {
                                <option value="@ExT.ExpensesTypeName"
                                        @if (Model.Expenses != null && ExT.ExpensesTypeName == Model.Expenses.ExpensesType) { <text> selected </text> }>
                                    @ExT.ExpensesTypeName
                                </option>
                            }
                        </select>
                    </div>
                    <div class="col">
                        <label>Transaction Type <span class="text-danger">*</span></label>
                        <select required class="form-control" name="TransactionType">
                            <option value="">-Select-</option>
                            @foreach (var ExT in Model.TransactionTypes)
                            {
                                <option value="@ExT.TransactionTypeName"
                                        @if (Model.Expenses != null && ExT.TransactionTypeName == Model.Expenses.TransactionType) { <text> selected </text> }>
                                    @ExT.TransactionTypeName
                                </option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <label>Amount <span class="text-danger">*</span></label>
                        <input type="number" step="1" required name="Amount"
                               @if (Model.Expenses != null) { <text> value="@Model.Expenses.Amount" </text> }
                               class="form-control" placeholder="Amount" />
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <label>Description <span class="text-danger">*</span></label>
                        <div class="autocomplete">
                            <input id="myInput" autocomplete="off" type="text" class="form-control" required name="Details" placeholder="Description"
                                   @if (Model.Expenses != null) { <text> value="@Model.Expenses.Details" </text> } />
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <label>Note</label>
                        <textarea class="form-control" placeholder="Note" name="Note">@if (Model.Expenses != null) {@Model.Expenses.Note}</textarea>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <button type="submit" class="btn btn-primary">Submit</button>
                        @if (Model.Expenses != null && !string.IsNullOrEmpty(Model.Expenses.RowKey))
                        {
                            <a href="@Url.Action("Delete", "Home", new { id = Model.Expenses.RowKey })" class="btn btn-danger">Delete</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@section Script{
    <script type="text/javascript">
        var countries = [];
        var Day, Month, Year;

        @if (Model.Expenses != null)
        {
            <text>
                Day = @Model.Expenses.TransactionDate.Day;
                Month = @Model.Expenses.TransactionDate.Month;
                Year = @Model.Expenses.TransactionDate.Year;
            </text>
        }
        else
        {
            <text>
                Day = @GenericLogic.IstNow.Day;
                Month = @GenericLogic.IstNow.Month;
                Year = @GenericLogic.IstNow.Year;
            </text>
        }

        $(document).ready(function () {
            $.ajax({
                type: "GET",
                url: "@Url.Action("Tag", "Home")",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    countries = data;
                    autocomplete(document.getElementById("myInput"), countries);
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });

            $('[name="Month"]').val(Month);
            MonthChange();
            $('[name="Day"]').val(Day);
            $('[name="Year"]').val(Year);
        });

        function autocomplete(inp, arr) {
                    /*the autocomplete function takes two arguments,
                    the text field element and an array of possible autocompleted values:*/
                    var currentFocus;
                    /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    /*if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {*/
                    if (arr[i].toUpperCase().includes(val.toUpperCase())) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("div");
                        /*make the matching letters bold:*/
                        var myArray = arr[i].toUpperCase().split(val.toUpperCase());
                        b.innerHTML = arr[i].substr(0, myArray[0].length);
                        b.innerHTML += "<strong>" + arr[i].substr(myArray[0].length, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(myArray[0].length + val.length, arr[i].length);

                        //b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        //b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });

            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        ///*An array containing all the country names in the world:*/
        console.log(countries);
        /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/

        function MonthChange(e) {
            $('[name="Day"]').val('');
            var maxDays = new Date($('[name="Year"]').val(), $('[name="Month"]').val(), 0).getDate();
            for (var iday = 1; iday < maxDays + 1; iday++) {
                $('[name="Day"]').append('<option value="' + iday + '">' + iday + '</option>');
            }
        }
    </script>
}